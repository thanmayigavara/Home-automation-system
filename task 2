#include <ESP8266WiFi.h>     // or <WiFi.h> for ESP32
#include <PubSubClient.h>

// WiFi credentials
const char* ssid = "YOUR_WIFI_SSID";
const char* password = "YOUR_WIFI_PASSWORD";

// MQTT Broker settings
const char* mqtt_server = "broker.hivemq.com";
const int mqtt_port = 1883;

// Device topics
#define LIGHT_TOPIC "home/room1/light"
#define FAN_TOPIC   "home/room1/fan"

// GPIO pins for relays
#define LIGHT_PIN 5  // D1
#define FAN_PIN   4  // D2

WiFiClient espClient;
PubSubClient client(espClient);

void setup_wifi() {
  delay(10);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
  }
}

void callback(char* topic, byte* message, unsigned int length) {
  String msg;
  for (uint i = 0; i < length; i++) {
    msg += (char)message[i];
  }

  if (String(topic) == LIGHT_TOPIC) {
    digitalWrite(LIGHT_PIN, msg == "ON" ? LOW : HIGH); // relay active LOW
  }
  if (String(topic) == FAN_TOPIC) {
    digitalWrite(FAN_PIN, msg == "ON" ? LOW : HIGH);
  }
}

void reconnect() {
  while (!client.connected()) {
    if (client.connect("ESP8266Client")) {
      client.subscribe(LIGHT_TOPIC);
      client.subscribe(FAN_TOPIC);
    } else {
      delay(5000);
    }
  }
}

void setup() {
  pinMode(LIGHT_PIN, OUTPUT); digitalWrite(LIGHT_PIN, HIGH);
  pinMode(FAN_PIN, OUTPUT); digitalWrite(FAN_PIN, HIGH);
  setup_wifi();
  client.setServer(mqtt_server, mqtt_port);
  client.setCallback(callback);
}

void loop() {
  if (!client.connected()) {
    reconnect();
  }
  client.loop();
}
